# Task 1
# Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25])
# and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.

def list_elements(a):
    return (a[0],a[-1])
    
c = [5, 10, 15, 20, 25]

print(list_elements(c))
---------------------------------------------------------------------------------------------------------------------------
# Task 2
# Write a program (using functions!) that asks the user for a long string containing multiple words.
# Print back to the user the same string, except with the words in backwards order. For example, say I type the string:
# My name is Michele
# Then I would see the string:
#  Michele is name My
# shown back to me.

def rev(str1):
    l = list(str1.split(' '))
    l.reverse()
    y = ' '.join(l)
    return y

s = input("enter any string:")

print(rev(s))
---------------------------------------------------------------------------------------------------------------------------
# Task 3
# Take two lists, say for example these two:
# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
# and write a program that returns a list that contains only the elements that are common between the lists (without duplicates).
# Make sure your program works on two lists of different sizes.
# Extras:
#   1. Randomly generate two lists to test this
#   2. Write this in one line of Python

#1st
import random
a = random.sample(range(1,15), 9)
b = random.sample(range(1,15), 6)
c = list(set(a).intersection(b))
print(a)
print(b)
print(c)

#2nd - one  line of code
a = [1, 1, 2, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
c = list(set(a).intersection(b)) 
print(c)
--------------------------------------------------------------------------------------------------------------------------------
# Task 4

# Rock Paper Scissors

# Make a two-player Rock-Paper-Scissors game. (Hint: Ask for player plays (using input),
# compare them, print out a message of congratulations to the winner, and ask if the players want to start a new game.

# Remember the rules:
#
# - Rock beats scissors
# - Scissors beats paper
# - Paper beats rock

print('''Please pick one:
            rock
            scissors
            paper''')

while True:
    game_dict = {'rock': 1, 'scissors': 2, 'paper': 3}
    player_a = str(input("Player a: "))
    player_b = str(input("Player b: "))
    a = game_dict.get(player_a)
    b = game_dict.get(player_b)
    dif = a - b

    if dif in [-1, 2]:
        print('player a wins.')
        if str(input('Do you want to play another game, yes or no?\n')) == 'yes':
            continue
        else:
            print('game over.')
            break
    elif dif in [-2, 1]:
        print('player b wins.')
        if str(input('Do you want to play another game, yes or no?\n')) == 'yes':
            continue
        else:
            print('game over.')
            break
    else:
        print('Draw.Please continue.')
--------------------------------------------------------------------------------------------------------------------------------------
 # Task 5 # Use the BeautifulSoup and requests Python packages to print out a list of all the news titles on the https://news.ycombinator.com/.
 
 
import requests
from bs4 import BeautifulSoup

page = requests.get("https://news.ycombinator.com/")

print(page.status_code)

soup = BeautifulSoup(page.text,'html.parser')


news_titles_list = soup.find_all(class_='storylink')
#print(news_titles_list)

for news_titles in news_titles_list:
     print(news_titles)
     
------------------------------------------------------------------------------------------------------------------------------------------------------
# Task 6

# Write the Task 5 titles to the text file.

# Extras:
# Ask the user to specify the name of the output file that will be saved.





--------------------------------------------------------------------------------------------------------------------------------------------------------
# Task 7

# Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols.
# The passwords should be random, generating a new password every time the user asks for a new password. Include your run-time code in a main method.

# Extra:
# Ask the user how strong they want their password to be. For weak passwords, pick a word or two from a list.


def generate_passwords(level):
    """
    Generate password of specific level.
    
    Arguments:
    level -- password security level. 8 characters for low, 12 for
    middle, and 16 for high. In each pattern, the password is a
    mix of lowercase letters, uppercase letters, numbers, and symbols.
    
    Returns:
    password -- a password string.
    """
    import string
    import random
    
    level_dict = {'low':8, 'middle':12, 'high':16}
    
    segment = [0, 0, 0, 0]
    for x in range(level_dict[level]):
        r = random.randint(0,3)
        segment[r] += 1
    
    lower_letter = random.choices(string.ascii_lowercase, k=segment[0])
    upper_letter = random.choices(string.ascii_uppercase, k=segment[1])
    digits = random.choices(string.digits, k=segment[2])
    symbols = random.choices('!@#$%^&*()_+', k=segment[3])
    
    password = lower_letter + upper_letter + digits + symbols
    random.shuffle(password)
    
    return ''.join(password)

def check_level_input(string, level):
    """
    Check the input string is a level or not.
    
    Arguments:
    string -- input string.
    level -- correct level string.
    
    Returns:
    True/False -- if the input is correct level, return True, else return false.
    """
    if string.lower() == level or string.lower() == level.lower()[0]:
        return True
    else:
        return False
    
def main():
    while True:
        level = input('Choose your password security level: [low/middle/high]')
        if level.lower() == 'exit':
            break
        elif check_level_input(level, 'low'):
            print(generate_passwords('low'))
        elif check_level_input(level, 'middle'):
            print(generate_passwords('middle'))
        elif check_level_input(level, 'high'):
            print(generate_passwords('high'))
        else:
            print('Input error.')
        
if __name__ == "__main__":
    main()
    
------------------------------------------------------------------------------------------------------------------------------------------------
# Task 8

# Please write a program to compress and decompress the string "Music industry hails passage of the Music Modernization Act".





----------------------------------------------------------------------------------------------------------------------------------------------------
# Task 9

# Please write a binary search function which searches an item in a sorted list.
# The function should return the index of element to be searched in the list.





-----------------------------------------------------------------------------------------------------------------------------------------------------
# Task 10

# Assuming that we have some email addresses in the "username@companyname.com" format,
# please write program to print the company name of a given email address. Both user names and company names are composed of letters only.

# Example:
# If the following email address is given as input to the program:

# akita@securitybrigade.com

# Then, the output of the program should be:

# securitybrigade

# In case of input data being supplied to the question, it should be assumed to be a console input.

import re

emailAddress = input()

pat2 = "(\w+)@((\w+)+(.com))"

r2 = re.match(pat2,emailAddress)

print (r2.group(3))



